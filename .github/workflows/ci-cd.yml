# This workflow is designed to build, test, and deploy a Java application using Docker

name: Java CI/CD Pipeline with Docker

# Define when this workflow will run
on:
  push:
    branches: [ main ]  # Trigger on push to main branch
  pull_request:
    branches: [ main ]  # Trigger on pull requests to main branch

jobs:
  build:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner
    
    steps:
      # Step 1: Check out the repository code
      - uses: actions/checkout@v2
        # This action checks-out your repository under $GITHUB_WORKSPACE, so your workflow can access it

      # Step 2: Set up Java environment
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'  # Specify the Java version
          distribution: 'adopt'  # Use AdoptOpenJDK distribution

      # Step 3: Build the application using Maven
      - name: Build with Maven
        run: mvn clean package -DskipTests
        # This command cleans the project, compiles the code, and packages it into a JAR file
        # The -DskipTests flag skips running tests at this stage

      # Step 4: Run tests
      - name: Run tests
        run: mvn test
        # This command runs all the tests in the project

      # Step 5: Build Docker image
      - name: Build Docker image
        run: docker build -t my-java-app:${{ github.sha }} .
        # This command builds a Docker image from the Dockerfile in the root directory
        # The image is tagged with the SHA of the commit that triggered the workflow

      # Step 6: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
        # This step logs into Docker Hub using credentials stored in GitHub Secrets

      # Step 7: Push Docker image to Docker Hub
      - name: Push Docker image
        run: |
          docker tag my-java-app:${{ github.sha }} ${{ secrets.DOCKER_HUB_USERNAME }}/my-java-app:${{ github.sha }}
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/my-java-app:${{ github.sha }}
        # This step tags the local image with the Docker Hub repository name and pushes it to Docker Hub
        # The ${{ github.sha }} ensures each pushed image has a unique tag

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Check Docker Installation
      run: docker --version

    - name: Pull Latest Image
      run: docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/my-java-app:${{ github.sha }}

    - name: Stop Existing Container
      run: docker stop my-java-app || true && docker rm my-java-app || true

    - name: Run Docker Container
      run: |
        docker run -d \
          --name my-java-app \
          -p 8080:8080 \
          ${{ secrets.DOCKER_HUB_USERNAME }}/my-java-app:${{ github.sha }}

    - name: Check Container Status
      run: docker ps | grep my-java-app

    - name: Print Application Logs
      run: docker logs my-java-app

    
